; Fri Jul 24 21:50:43 GMT-06:00 2009
; 
;+ (version "3.3")
;+ (build "Build 418")


(defclass %3ACLIPS_TOP_LEVEL_SLOT_CLASS "Fake class to save top-level slot information"
	(is-a USER)
	(role abstract)
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot cases
		(type INSTANCE)
;+		(allowed-classes Case)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot similarTo
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot leastSimilarityGrade
		(type SYMBOL)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot status
		(type SYMBOL)
		(allowed-values FALSE TRUE)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot goalRank
		(type INSTANCE)
;+		(allowed-classes DefinedTerm)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot problema
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot justification
		(type INSTANCE)
;+		(allowed-classes DescriptionElement)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot solution
		(type INSTANCE)
;+		(allowed-classes Solution)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Resolve
	(is-a AgentAction)
	(role concrete)
	(single-slot problema
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Retain
	(is-a AgentAction)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Retrieve
	(is-a AgentAction)
	(role concrete)
	(multislot cases
		(type INSTANCE)
;+		(allowed-classes Case)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot similarTo
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Adapt
	(is-a AgentAction)
	(role concrete)
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot cases
		(type INSTANCE)
;+		(allowed-classes Case)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write)))

(defclass Case
	(is-a Concept)
	(role concrete)
	(single-slot status
		(type SYMBOL)
		(allowed-values FALSE TRUE)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot problema
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot solution
		(type INSTANCE)
;+		(allowed-classes Solution)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Problema
	(is-a Concept)
	(role concrete)
	(single-slot leastSimilarityGrade
		(type SYMBOL)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot description
		(type INSTANCE)
;+		(allowed-classes DescriptionElement)
		(create-accessor read-write))
	(single-slot goalRank
		(type INSTANCE)
;+		(allowed-classes DefinedTerm)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Solution
	(is-a Concept)
	(role concrete)
	(single-slot taxon
		(type INSTANCE)
;+		(allowed-classes DefinedTerm)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot justification
		(type INSTANCE)
;+		(allowed-classes DescriptionElement)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot rank
		(type INSTANCE)
;+		(allowed-classes Rank)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IsPositive
	(is-a Predicate)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IsNegative
	(is-a Predicate)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IsSimilarTo
	(is-a Predicate)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot problema
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IsSolution
	(is-a Predicate)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IsTheMostSilimarTo
	(is-a Predicate)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot problema
		(type INSTANCE)
;+		(allowed-classes Problema)
;+		(cardinality 1 1)
		(create-accessor read-write)))