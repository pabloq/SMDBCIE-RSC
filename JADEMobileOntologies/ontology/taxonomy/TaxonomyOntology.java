// file: TaxonomyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology.taxonomy;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: TaxonomyOntology.java
 * @author ontology bean generator
 * @version 2009/10/20, 16:33:53
 */
public class TaxonomyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 8335714681696847814L;

  //NAME
  public static final String ONTOLOGY_NAME = "Taxonomy";
  // The singleton instance of this ontology
  private static Ontology theInstance = new TaxonomyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String ISDESCRIPTIVEELEMENT_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String ISDESCRIPTIVEELEMENT="IsDescriptiveElement";
    public static final String APPLIESTO_ATTRIBUTE="attribute";
    public static final String APPLIESTO_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String APPLIESTO="AppliesTo";
    public static final String ISSUCCESSORTAXONOF_OBJECTTAXON="objectTaxon";
    public static final String ISSUCCESSORTAXONOF_SUBJECTTAXON="subjectTaxon";
    public static final String ISSUCCESSORTAXONOF="IsSuccessorTaxonOf";
    public static final String OWNS_ATTRIBUTE="attribute";
    public static final String OWNS_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String OWNS="Owns";
    public static final String DESCRIBES_SCORE="score";
    public static final String DESCRIBES_ATTRIBUTE="attribute";
    public static final String DESCRIBES="Describes";
    public static final String DESCRIBEDBY_SCORE="score";
    public static final String DESCRIBEDBY_ATTRIBUTE="attribute";
    public static final String DESCRIBEDBY="DescribedBy";
    public static final String ISSHEETTAXON_TAXON="taxon";
    public static final String ISSHEETTAXON="IsSheetTaxon";
    public static final String ISROOTTAXON_TAXON="taxon";
    public static final String ISROOTTAXON="IsRootTaxon";
    public static final String ISPREDECESSORTAXONOF_OBJECTTAXON="objectTaxon";
    public static final String ISPREDECESSORTAXONOF_SUBJECTTAXON="subjectTaxon";
    public static final String ISPREDECESSORTAXONOF="IsPredecessorTaxonOf";
    public static final String VALUE_DESCRIBES="describes";
    public static final String VALUE_MEASURINGUNIT="measuringUnit";
    public static final String VALUE="Value";
    public static final String RVCHARACTERDESCRIPTOR="RVCharacterDescriptor";
    public static final String WEIGHTEDDESCRIPTION_WEIGHTEDDESCRIPTORS="weightedDescriptors";
    public static final String WEIGHTEDDESCRIPTION="WeightedDescription";
    public static final String HEURISTICDESCRIPTOR="HeuristicDescriptor";
    public static final String QUANTITATIVECHARACTERDESCRIPTOR="QuantitativeCharacterDescriptor";
    public static final String STATE_DESCRIBES="describes";
    public static final String STATE="State";
    public static final String SVCHARACTERDESCRIPTOR="SVCharacterDescriptor";
    public static final String WEIGHTEDDESCRIPTOR_MODIFIER="modifier";
    public static final String WEIGHTEDDESCRIPTOR_DESCRIPTOR="descriptor";
    public static final String WEIGHTEDDESCRIPTOR="WeightedDescriptor";
    public static final String SSCHARACTERDESCRIPTOR="SSCharacterDescriptor";
    public static final String MSCHARACTERDESCRIPTOR="MSCharacterDescriptor";
    public static final String CHARACTERDESCRIPTOR="CharacterDescriptor";
    public static final String QUALITATIVECHARACTERDESCRIPTOR="QualitativeCharacterDescriptor";
    public static final String SINGLEVALUE_VALUE="value";
    public static final String SINGLEVALUE="SingleValue";
    public static final String RANGEVALUE_LOWERBOUND="lowerBound";
    public static final String RANGEVALUE_UPPERBOUND="upperBound";
    public static final String RANGEVALUE="RangeValue";
    public static final String STRUCTURE_OWNS="owns";
    public static final String STRUCTURE="Structure";
    public static final String DEFINEDTERM_TERM="term";
    public static final String DEFINEDTERM_DEFINITION="definition";
    public static final String DEFINEDTERM="DefinedTerm";
    public static final String ENVIRONMENTALCATEGORY_OWNS="owns";
    public static final String ENVIRONMENTALCATEGORY="EnvironmentalCategory";
    public static final String DESCRIPTOR_STRUCTURE="structure";
    public static final String DESCRIPTOR_SCORE="score";
    public static final String DESCRIPTOR_ATTRIBUTE="attribute";
    public static final String DESCRIPTOR="Descriptor";
    public static final String ATTRIBUTE_DESCRIBEDBY="describedBy";
    public static final String ATTRIBUTE_APLIESTO="apliesTo";
    public static final String ATTRIBUTE="Attribute";
    public static final String MODIFIER_SCOREWEIGHT="scoreWeight";
    public static final String MODIFIER_ATTRIBUTEWEIGHT="attributeWeight";
    public static final String MODIFIER_STRUCTUREWEIGHT="structureWeight";
    public static final String MODIFIER="Modifier";
    public static final String RVHEURISTICDESCRIPTOR="RVHeuristicDescriptor";
    public static final String SVHEURISTICDESCRIPTOR="SVHeuristicDescriptor";
    public static final String TAXON_WEIGHTEDDESCRIPTION="weightedDescription";
    public static final String TAXON_PREDECESSOR="predecessor";
    public static final String TAXON_SUCCESSORS="successors";
    public static final String TAXON_NAME="name";
    public static final String TAXON_LEVEL="level";
    public static final String TAXON="Taxon";
    public static final String DESCRIPTION_DESCRIPTORS="descriptors";
    public static final String DESCRIPTION="Description";
    public static final String SSHEURISTICDESCRIPTOR="SSHeuristicDescriptor";
    public static final String QUALITATIVEHEURISTICDESCRIPTOR="QualitativeHeuristicDescriptor";
    public static final String QUANTITATIVEHEURISTICDESCRIPTOR="QuantitativeHeuristicDescriptor";
    public static final String MSHEURISTICDESCRIPTOR="MSHeuristicDescriptor";

  /**
   * Constructor
  */
  private TaxonomyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema msHeuristicDescriptorSchema = new ConceptSchema(MSHEURISTICDESCRIPTOR);
    add(msHeuristicDescriptorSchema, Class.forName("ontology.taxonomy.MSHeuristicDescriptor"));
    ConceptSchema quantitativeHeuristicDescriptorSchema = new ConceptSchema(QUANTITATIVEHEURISTICDESCRIPTOR);
    add(quantitativeHeuristicDescriptorSchema, Class.forName("ontology.taxonomy.QuantitativeHeuristicDescriptor"));
    ConceptSchema qualitativeHeuristicDescriptorSchema = new ConceptSchema(QUALITATIVEHEURISTICDESCRIPTOR);
    add(qualitativeHeuristicDescriptorSchema, Class.forName("ontology.taxonomy.QualitativeHeuristicDescriptor"));
    ConceptSchema ssHeuristicDescriptorSchema = new ConceptSchema(SSHEURISTICDESCRIPTOR);
    add(ssHeuristicDescriptorSchema, Class.forName("ontology.taxonomy.SSHeuristicDescriptor"));
    ConceptSchema descriptionSchema = new ConceptSchema(DESCRIPTION);
    add(descriptionSchema, Class.forName("ontology.taxonomy.Description"));
    ConceptSchema taxonSchema = new ConceptSchema(TAXON);
    add(taxonSchema, Class.forName("ontology.taxonomy.Taxon"));
    ConceptSchema svHeuristicDescriptorSchema = new ConceptSchema(SVHEURISTICDESCRIPTOR);
    add(svHeuristicDescriptorSchema, Class.forName("ontology.taxonomy.SVHeuristicDescriptor"));
    ConceptSchema rvHeuristicDescriptorSchema = new ConceptSchema(RVHEURISTICDESCRIPTOR);
    add(rvHeuristicDescriptorSchema, Class.forName("ontology.taxonomy.RVHeuristicDescriptor"));
    ConceptSchema modifierSchema = new ConceptSchema(MODIFIER);
    add(modifierSchema, Class.forName("ontology.taxonomy.Modifier"));
    ConceptSchema attributeSchema = new ConceptSchema(ATTRIBUTE);
    add(attributeSchema, Class.forName("ontology.taxonomy.Attribute"));
    ConceptSchema descriptorSchema = new ConceptSchema(DESCRIPTOR);
    add(descriptorSchema, Class.forName("ontology.taxonomy.Descriptor"));
    ConceptSchema environmentalCategorySchema = new ConceptSchema(ENVIRONMENTALCATEGORY);
    add(environmentalCategorySchema, Class.forName("ontology.taxonomy.EnvironmentalCategory"));
    ConceptSchema definedTermSchema = new ConceptSchema(DEFINEDTERM);
    add(definedTermSchema, Class.forName("ontology.taxonomy.DefinedTerm"));
    ConceptSchema structureSchema = new ConceptSchema(STRUCTURE);
    add(structureSchema, Class.forName("ontology.taxonomy.Structure"));
    ConceptSchema rangeValueSchema = new ConceptSchema(RANGEVALUE);
    add(rangeValueSchema, Class.forName("ontology.taxonomy.RangeValue"));
    ConceptSchema singleValueSchema = new ConceptSchema(SINGLEVALUE);
    add(singleValueSchema, Class.forName("ontology.taxonomy.SingleValue"));
    ConceptSchema qualitativeCharacterDescriptorSchema = new ConceptSchema(QUALITATIVECHARACTERDESCRIPTOR);
    add(qualitativeCharacterDescriptorSchema, Class.forName("ontology.taxonomy.QualitativeCharacterDescriptor"));
    ConceptSchema characterDescriptorSchema = new ConceptSchema(CHARACTERDESCRIPTOR);
    add(characterDescriptorSchema, Class.forName("ontology.taxonomy.CharacterDescriptor"));
    ConceptSchema msCharacterDescriptorSchema = new ConceptSchema(MSCHARACTERDESCRIPTOR);
    add(msCharacterDescriptorSchema, Class.forName("ontology.taxonomy.MSCharacterDescriptor"));
    ConceptSchema ssCharacterDescriptorSchema = new ConceptSchema(SSCHARACTERDESCRIPTOR);
    add(ssCharacterDescriptorSchema, Class.forName("ontology.taxonomy.SSCharacterDescriptor"));
    ConceptSchema weightedDescriptorSchema = new ConceptSchema(WEIGHTEDDESCRIPTOR);
    add(weightedDescriptorSchema, Class.forName("ontology.taxonomy.WeightedDescriptor"));
    ConceptSchema svCharacterDescriptorSchema = new ConceptSchema(SVCHARACTERDESCRIPTOR);
    add(svCharacterDescriptorSchema, Class.forName("ontology.taxonomy.SVCharacterDescriptor"));
    ConceptSchema stateSchema = new ConceptSchema(STATE);
    add(stateSchema, Class.forName("ontology.taxonomy.State"));
    ConceptSchema quantitativeCharacterDescriptorSchema = new ConceptSchema(QUANTITATIVECHARACTERDESCRIPTOR);
    add(quantitativeCharacterDescriptorSchema, Class.forName("ontology.taxonomy.QuantitativeCharacterDescriptor"));
    ConceptSchema heuristicDescriptorSchema = new ConceptSchema(HEURISTICDESCRIPTOR);
    add(heuristicDescriptorSchema, Class.forName("ontology.taxonomy.HeuristicDescriptor"));
    ConceptSchema weightedDescriptionSchema = new ConceptSchema(WEIGHTEDDESCRIPTION);
    add(weightedDescriptionSchema, Class.forName("ontology.taxonomy.WeightedDescription"));
    ConceptSchema rvCharacterDescriptorSchema = new ConceptSchema(RVCHARACTERDESCRIPTOR);
    add(rvCharacterDescriptorSchema, Class.forName("ontology.taxonomy.RVCharacterDescriptor"));
    ConceptSchema valueSchema = new ConceptSchema(VALUE);
    add(valueSchema, Class.forName("ontology.taxonomy.Value"));

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema isPredecessorTaxonOfSchema = new PredicateSchema(ISPREDECESSORTAXONOF);
    add(isPredecessorTaxonOfSchema, Class.forName("ontology.taxonomy.IsPredecessorTaxonOf"));
    PredicateSchema isRootTaxonSchema = new PredicateSchema(ISROOTTAXON);
    add(isRootTaxonSchema, Class.forName("ontology.taxonomy.IsRootTaxon"));
    PredicateSchema isSheetTaxonSchema = new PredicateSchema(ISSHEETTAXON);
    add(isSheetTaxonSchema, Class.forName("ontology.taxonomy.IsSheetTaxon"));
    PredicateSchema describedBySchema = new PredicateSchema(DESCRIBEDBY);
    add(describedBySchema, Class.forName("ontology.taxonomy.DescribedBy"));
    PredicateSchema describesSchema = new PredicateSchema(DESCRIBES);
    add(describesSchema, Class.forName("ontology.taxonomy.Describes"));
    PredicateSchema ownsSchema = new PredicateSchema(OWNS);
    add(ownsSchema, Class.forName("ontology.taxonomy.Owns"));
    PredicateSchema isSuccessorTaxonOfSchema = new PredicateSchema(ISSUCCESSORTAXONOF);
    add(isSuccessorTaxonOfSchema, Class.forName("ontology.taxonomy.IsSuccessorTaxonOf"));
    PredicateSchema appliesToSchema = new PredicateSchema(APPLIESTO);
    add(appliesToSchema, Class.forName("ontology.taxonomy.AppliesTo"));
    PredicateSchema isDescriptiveElementSchema = new PredicateSchema(ISDESCRIPTIVEELEMENT);
    add(isDescriptiveElementSchema, Class.forName("ontology.taxonomy.IsDescriptiveElement"));


    // adding fields
    descriptionSchema.add(DESCRIPTION_DESCRIPTORS, descriptorSchema, 1, ObjectSchema.UNLIMITED);
    taxonSchema.add(TAXON_LEVEL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    taxonSchema.add(TAXON_NAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    taxonSchema.add(TAXON_SUCCESSORS, taxonSchema, 0, ObjectSchema.UNLIMITED);
    taxonSchema.add(TAXON_PREDECESSOR, taxonSchema, ObjectSchema.OPTIONAL);
    taxonSchema.add(TAXON_WEIGHTEDDESCRIPTION, weightedDescriptionSchema, ObjectSchema.MANDATORY);
    modifierSchema.add(MODIFIER_STRUCTUREWEIGHT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    modifierSchema.add(MODIFIER_ATTRIBUTEWEIGHT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    modifierSchema.add(MODIFIER_SCOREWEIGHT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    attributeSchema.add(ATTRIBUTE_APLIESTO, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    attributeSchema.add(ATTRIBUTE_DESCRIBEDBY, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    descriptorSchema.add(DESCRIPTOR_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    descriptorSchema.add(DESCRIPTOR_SCORE, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    descriptorSchema.add(DESCRIPTOR_STRUCTURE, new ConceptSchema("Concept"), ObjectSchema.MANDATORY);
    environmentalCategorySchema.add(ENVIRONMENTALCATEGORY_OWNS, attributeSchema, 1, ObjectSchema.UNLIMITED);
    definedTermSchema.add(DEFINEDTERM_DEFINITION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    definedTermSchema.add(DEFINEDTERM_TERM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    structureSchema.add(STRUCTURE_OWNS, attributeSchema, 1, ObjectSchema.UNLIMITED);
    rangeValueSchema.add(RANGEVALUE_UPPERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    rangeValueSchema.add(RANGEVALUE_LOWERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    singleValueSchema.add(SINGLEVALUE_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    weightedDescriptorSchema.add(WEIGHTEDDESCRIPTOR_DESCRIPTOR, descriptorSchema, ObjectSchema.MANDATORY);
    weightedDescriptorSchema.add(WEIGHTEDDESCRIPTOR_MODIFIER, modifierSchema, ObjectSchema.MANDATORY);
    stateSchema.add(STATE_DESCRIBES, attributeSchema, 1, ObjectSchema.UNLIMITED);
    weightedDescriptionSchema.add(WEIGHTEDDESCRIPTION_WEIGHTEDDESCRIPTORS, weightedDescriptorSchema, 1, ObjectSchema.UNLIMITED);
    valueSchema.add(VALUE_MEASURINGUNIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    valueSchema.add(VALUE_DESCRIBES, attributeSchema, 1, ObjectSchema.UNLIMITED);
    isPredecessorTaxonOfSchema.add(ISPREDECESSORTAXONOF_SUBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    isPredecessorTaxonOfSchema.add(ISPREDECESSORTAXONOF_OBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    isRootTaxonSchema.add(ISROOTTAXON_TAXON, taxonSchema, ObjectSchema.MANDATORY);
    isSheetTaxonSchema.add(ISSHEETTAXON_TAXON, taxonSchema, ObjectSchema.MANDATORY);
    describedBySchema.add(DESCRIBEDBY_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    describedBySchema.add(DESCRIBEDBY_SCORE, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    describesSchema.add(DESCRIBES_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    describesSchema.add(DESCRIBES_SCORE, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    ownsSchema.add(OWNS_DESCRIPTIVEELEMENT, new ConceptSchema("Concept"), ObjectSchema.MANDATORY);
    ownsSchema.add(OWNS_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    isSuccessorTaxonOfSchema.add(ISSUCCESSORTAXONOF_SUBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    isSuccessorTaxonOfSchema.add(ISSUCCESSORTAXONOF_OBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    appliesToSchema.add(APPLIESTO_DESCRIPTIVEELEMENT, new ConceptSchema("Concept"), ObjectSchema.MANDATORY);
    appliesToSchema.add(APPLIESTO_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    isDescriptiveElementSchema.add(ISDESCRIPTIVEELEMENT_DESCRIPTIVEELEMENT, new ConceptSchema("Concept"), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    msHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);
    quantitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    qualitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    ssHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);
    svHeuristicDescriptorSchema.addSuperSchema(quantitativeHeuristicDescriptorSchema);
    rvHeuristicDescriptorSchema.addSuperSchema(quantitativeHeuristicDescriptorSchema);
    attributeSchema.addSuperSchema(definedTermSchema);
    environmentalCategorySchema.addSuperSchema(definedTermSchema);
    structureSchema.addSuperSchema(definedTermSchema);
    rangeValueSchema.addSuperSchema(valueSchema);
    singleValueSchema.addSuperSchema(valueSchema);
    qualitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    characterDescriptorSchema.addSuperSchema(descriptorSchema);
    msCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    ssCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    svCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);
    stateSchema.addSuperSchema(definedTermSchema);
    quantitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    heuristicDescriptorSchema.addSuperSchema(descriptorSchema);
    rvCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
