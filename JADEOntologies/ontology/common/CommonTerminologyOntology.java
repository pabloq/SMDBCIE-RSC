// file: CommonTerminologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology.common;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import nl.uva.psy.swi.beangenerator.ProtegeIntrospector;
import nl.uva.psy.swi.beangenerator.SlotHolder;
import nl.uva.psy.swi.beangenerator.ProtegeTools;

/** file: CommonTerminologyOntology.java
 * @author ontology bean generator
 * @version 2009/09/15, 18:06:25
 */
public class CommonTerminologyOntology extends jade.content.onto.Ontology implements ProtegeTools.ProtegeOntology {
   /**
    * These hashmap store a mapping from jade names to either protege names of SlotHolder 
    * containing the protege names.  And vice versa
    */  
   private HashMap jadeToProtege;

  private static final long serialVersionUID = -2693500281773954763L;

  //NAME
  public static final String ONTOLOGY_NAME = "CommonTerminology";
  private static ProtegeIntrospector introspect = new ProtegeIntrospector();
  // The singleton instance of this ontology
  private static Ontology theInstance = new CommonTerminologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }

   // ProtegeOntology methods
   public SlotHolder getSlotNameFromJADEName(SlotHolder jadeSlot) {
     return (SlotHolder) jadeToProtege.get(jadeSlot);
   }


   // storing the information
   private void storeSlotName(String jadeName, String javaClassName, String slotName){
       jadeToProtege.put(new SlotHolder(javaClassName, jadeName), new SlotHolder(javaClassName, slotName));
   }


   // VOCABULARY
    public static final String APLIESTO="ApliesTo";
    public static final String OWNS="Owns";
    public static final String SINGLEVALUE_VALUE="value";
    public static final String SINGLEVALUE="SingleValue";
    public static final String DEFINEDTERM_TERM="term";
    public static final String DEFINEDTERM_DEFINITION="definition";
    public static final String DEFINEDTERM="DefinedTerm";
    public static final String QUALITATIVEHEURISTICDESCRIPTOR="QualitativeHeuristicDescriptor";
    public static final String QUANTITATIVEHEURISTICDESCRIPTOR="QuantitativeHeuristicDescriptor";
    public static final String QUANTITATIVECHARACTERDESCRIPTOR="QuantitativeCharacterDescriptor";
    public static final String HEURISTICDESCRIPTOR="HeuristicDescriptor";
    public static final String CHARACTERDESCRIPTOR="CharacterDescriptor";
    public static final String QUALITATIVECHARACTERDESCRIPTOR="QualitativeCharacterDescriptor";
    public static final String RANGEVALUE_UPPERBOUND="upperBound";
    public static final String RANGEVALUE_LOWERBOUND="lowerBound";
    public static final String RANGEVALUE="RangeValue";
    public static final String ATTRIBUTE_DESCRIBEDBY="describedBy";
    public static final String ATTRIBUTE_APLIESTO="apliesTo";
    public static final String ATTRIBUTE="Attribute";
    public static final String DESCRIPTOR_SCORE="score";
    public static final String DESCRIPTOR_STRUCTURE="structure";
    public static final String DESCRIPTOR_ATTRIBUTE="attribute";
    public static final String DESCRIPTOR="Descriptor";
    public static final String STATE_DESCRIBES="describes";
    public static final String STATE="State";
    public static final String VALUE_DESCRIBES="describes";
    public static final String VALUE_MEASURINGUNIT="measuringUnit";
    public static final String VALUE="Value";
    public static final String STRUCTURE_OWNS="owns";
    public static final String STRUCTURE="Structure";
    public static final String SVHEURISTICDESCRIPTOR="SVHeuristicDescriptor";
    public static final String MSHEURISTICDESCRIPTOR="MSHeuristicDescriptor";
    public static final String SSHEURISTICDESCRIPTOR="SSHeuristicDescriptor";
    public static final String RVCHARACTERDESCRIPTOR="RVCharacterDescriptor";
    public static final String SVCHARACTERDESCRIPTOR="SVCharacterDescriptor";
    public static final String MSCHARACTERDESCRIPTOR="MSCharacterDescriptor";
    public static final String SSCHARACTERDESCRIPTOR="SSCharacterDescriptor";
    public static final String ENVIRONMENTALCATEGORY_OWNS="owns";
    public static final String ENVIRONMENTALCATEGORY="EnvironmentalCategory";

  /**
   * Constructor
  */
  private CommonTerminologyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    introspect.setOntology(this);
    jadeToProtege = new HashMap();
    try { 

    // adding Concept(s)
    ConceptSchema environmentalCategorySchema = new ConceptSchema(ENVIRONMENTALCATEGORY);
    add(environmentalCategorySchema, ontology.common.EnvironmentalCategory.class);
    ConceptSchema ssCharacterDescriptorSchema = new ConceptSchema(SSCHARACTERDESCRIPTOR);
    add(ssCharacterDescriptorSchema, ontology.common.SSCharacterDescriptor.class);
    ConceptSchema msCharacterDescriptorSchema = new ConceptSchema(MSCHARACTERDESCRIPTOR);
    add(msCharacterDescriptorSchema, ontology.common.MSCharacterDescriptor.class);
    ConceptSchema svCharacterDescriptorSchema = new ConceptSchema(SVCHARACTERDESCRIPTOR);
    add(svCharacterDescriptorSchema, ontology.common.SVCharacterDescriptor.class);
    ConceptSchema rvCharacterDescriptorSchema = new ConceptSchema(RVCHARACTERDESCRIPTOR);
    add(rvCharacterDescriptorSchema, ontology.common.RVCharacterDescriptor.class);
    ConceptSchema ssHeuristicDescriptorSchema = new ConceptSchema(SSHEURISTICDESCRIPTOR);
    add(ssHeuristicDescriptorSchema, ontology.common.SSHeuristicDescriptor.class);
    ConceptSchema msHeuristicDescriptorSchema = new ConceptSchema(MSHEURISTICDESCRIPTOR);
    add(msHeuristicDescriptorSchema, ontology.common.MSHeuristicDescriptor.class);
    ConceptSchema svHeuristicDescriptorSchema = new ConceptSchema(SVHEURISTICDESCRIPTOR);
    add(svHeuristicDescriptorSchema, ontology.common.SVHeuristicDescriptor.class);
    ConceptSchema structureSchema = new ConceptSchema(STRUCTURE);
    add(structureSchema, ontology.common.Structure.class);
    ConceptSchema valueSchema = new ConceptSchema(VALUE);
    add(valueSchema, ontology.common.Value.class);
    ConceptSchema stateSchema = new ConceptSchema(STATE);
    add(stateSchema, ontology.common.State.class);
    ConceptSchema descriptorSchema = new ConceptSchema(DESCRIPTOR);
    add(descriptorSchema, ontology.common.Descriptor.class);
    ConceptSchema attributeSchema = new ConceptSchema(ATTRIBUTE);
    add(attributeSchema, ontology.common.Attribute.class);
    ConceptSchema rangeValueSchema = new ConceptSchema(RANGEVALUE);
    add(rangeValueSchema, ontology.common.RangeValue.class);
    ConceptSchema qualitativeCharacterDescriptorSchema = new ConceptSchema(QUALITATIVECHARACTERDESCRIPTOR);
    add(qualitativeCharacterDescriptorSchema, ontology.common.QualitativeCharacterDescriptor.class);
    ConceptSchema characterDescriptorSchema = new ConceptSchema(CHARACTERDESCRIPTOR);
    add(characterDescriptorSchema, ontology.common.CharacterDescriptor.class);
    ConceptSchema heuristicDescriptorSchema = new ConceptSchema(HEURISTICDESCRIPTOR);
    add(heuristicDescriptorSchema, ontology.common.HeuristicDescriptor.class);
    ConceptSchema quantitativeCharacterDescriptorSchema = new ConceptSchema(QUANTITATIVECHARACTERDESCRIPTOR);
    add(quantitativeCharacterDescriptorSchema, ontology.common.QuantitativeCharacterDescriptor.class);
    ConceptSchema quantitativeHeuristicDescriptorSchema = new ConceptSchema(QUANTITATIVEHEURISTICDESCRIPTOR);
    add(quantitativeHeuristicDescriptorSchema, ontology.common.QuantitativeHeuristicDescriptor.class);
    ConceptSchema qualitativeHeuristicDescriptorSchema = new ConceptSchema(QUALITATIVEHEURISTICDESCRIPTOR);
    add(qualitativeHeuristicDescriptorSchema, ontology.common.QualitativeHeuristicDescriptor.class);
    ConceptSchema definedTermSchema = new ConceptSchema(DEFINEDTERM);
    add(definedTermSchema, ontology.common.DefinedTerm.class);
    ConceptSchema singleValueSchema = new ConceptSchema(SINGLEVALUE);
    add(singleValueSchema, ontology.common.SingleValue.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema ownsSchema = new PredicateSchema(OWNS);
    add(ownsSchema, ontology.common.Owns.class);
    PredicateSchema apliesToSchema = new PredicateSchema(APLIESTO);
    add(apliesToSchema, ontology.common.ApliesTo.class);


    // adding fields
    environmentalCategorySchema.add(ENVIRONMENTALCATEGORY_OWNS, attributeSchema, 1, ObjectSchema.UNLIMITED);
    structureSchema.add(STRUCTURE_OWNS, attributeSchema, 1, ObjectSchema.UNLIMITED);
    valueSchema.add(VALUE_MEASURINGUNIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    valueSchema.add(VALUE_DESCRIBES, attributeSchema, 1, ObjectSchema.UNLIMITED);
    stateSchema.add(STATE_DESCRIBES, attributeSchema, 1, ObjectSchema.UNLIMITED);
    descriptorSchema.add(DESCRIPTOR_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    descriptorSchema.add(DESCRIPTOR_STRUCTURE, new ConceptSchema("Concept"), ObjectSchema.MANDATORY);
    descriptorSchema.add(DESCRIPTOR_SCORE, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    attributeSchema.add(ATTRIBUTE_APLIESTO, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    attributeSchema.add(ATTRIBUTE_DESCRIBEDBY, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    rangeValueSchema.add(RANGEVALUE_LOWERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    rangeValueSchema.add(RANGEVALUE_UPPERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    definedTermSchema.add(DEFINEDTERM_DEFINITION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    definedTermSchema.add(DEFINEDTERM_TERM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    singleValueSchema.add(SINGLEVALUE_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);

    // adding name mappings
    storeSlotName("owns", "ontology.common.EnvironmentalCategory", "owns");  
    storeSlotName("owns", "ontology.common.Structure", "owns");  
    storeSlotName("measuringUnit", "ontology.common.Value", "measuringUnit");  
    storeSlotName("describes", "ontology.common.Value", "describes");  
    storeSlotName("describes", "ontology.common.State", "describes");  
    storeSlotName("attribute", "ontology.common.Descriptor", "attribute");  
    storeSlotName("structure", "ontology.common.Descriptor", "structure");  
    storeSlotName("score", "ontology.common.Descriptor", "score");  
    storeSlotName("apliesTo", "ontology.common.Attribute", "apliesTo");  
    storeSlotName("describedBy", "ontology.common.Attribute", "describedBy");  
    storeSlotName("lowerBound", "ontology.common.RangeValue", "lowerBound");  
    storeSlotName("upperBound", "ontology.common.RangeValue", "upperBound");  
    storeSlotName("definition", "ontology.common.DefinedTerm", "definition");  
    storeSlotName("term", "ontology.common.DefinedTerm", "term");  
    storeSlotName("value", "ontology.common.SingleValue", "value");  

    // adding inheritance
    environmentalCategorySchema.addSuperSchema(definedTermSchema);
    ssCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    msCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    svCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);
    rvCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);
    ssHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);
    msHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);
    svHeuristicDescriptorSchema.addSuperSchema(quantitativeHeuristicDescriptorSchema);
    structureSchema.addSuperSchema(definedTermSchema);
    stateSchema.addSuperSchema(definedTermSchema);
    attributeSchema.addSuperSchema(definedTermSchema);
    rangeValueSchema.addSuperSchema(valueSchema);
    qualitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    characterDescriptorSchema.addSuperSchema(descriptorSchema);
    heuristicDescriptorSchema.addSuperSchema(descriptorSchema);
    quantitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    quantitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    qualitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    singleValueSchema.addSuperSchema(valueSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
