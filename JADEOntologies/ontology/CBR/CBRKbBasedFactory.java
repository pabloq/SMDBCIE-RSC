// file: CBRKbBasedFactory.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology.CBR;

import ontology.CBR.impl.*;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import jade.util.leap.ArrayList;

import edu.stanford.smi.protege.model.KnowledgeBase;
import edu.stanford.smi.protege.model.Instance;
import edu.stanford.smi.protege.model.Slot;
import edu.stanford.smi.protegex.owl.model.OWLModel;

/** file: CBRKbBasedFactory.java
 * @author ontology bean generator
 * @version 2009/10/17, 19:00:45
 */
public class CBRKbBasedFactory {
  private static final long serialVersionUID = 1907932705116471396L;

  private KnowledgeBase kb = null;
  private OWLModel owlModel = null;
  private java.util.HashMap<String, Object> beanInstances = null;
  public static java.util.HashMap<String, String> typeToMethodName = new java.util.HashMap<String, String> ();

  private Object tempAnyValue;
  private Boolean tempBooleanValue;
  private Class tempClsValue;
  private Float tempFloatValue;
  private Instance tempInstanceValue;
  private Integer tempIntegerValue;
  private String tempStringValue;
  private String tempSymbolValue;

  private java.util.ArrayList  tempAnyValues;
  private java.util.ArrayList <Boolean> tempBooleanValues;
  private java.util.ArrayList <Class> tempClsValues;
  private java.util.ArrayList <Float> tempFloatValues;
  private java.util.ArrayList <Instance> tempInstanceValues;
  private java.util.ArrayList <Integer> tempIntegerValues;
  private java.util.ArrayList <String> tempStringValues;
  private java.util.ArrayList <String> tempSymbolValues;


  //Constructor(s)
  public CBRKbBasedFactory(KnowledgeBase kb) {
    this.kb = kb;
    if (kb instanceof OWLModel)
      this.owlModel = (OWLModel) kb;
    else
      this.owlModel = null;
    beanInstances = new java.util.HashMap<String, Object>();
  }

  /**
   * It's a subclass of a defined term
   * Protege name: Structure
  */
  public Structure getStructure(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Structure)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Structure javaInst = new DefaultStructure(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "owns" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addOwns( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"owns\" in instance " + instanceName);
        }
      }
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "definition" ) );
    if (tempStringValue != null) {
      javaInst.setDefinition(tempStringValue);
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst.setTerm(tempStringValue);
    }

    return javaInst;
  }

  /**
   * Protege name: EnvironmentalCategory
  */
  public EnvironmentalCategory getEnvironmentalCategory(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (EnvironmentalCategory)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    EnvironmentalCategory javaInst = new DefaultEnvironmentalCategory(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "owns" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addOwns( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"owns\" in instance " + instanceName);
        }
      }
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "definition" ) );
    if (tempStringValue != null) {
      javaInst.setDefinition(tempStringValue);
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst.setTerm(tempStringValue);
    }

    return javaInst;
  }

  /**
   * Protege name: ProposedSolution
  */
  public ProposedSolution getProposedSolution(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (ProposedSolution)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    ProposedSolution javaInst = new DefaultProposedSolution(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempBooleanValue = getBooleanValue( protegeInst, kb.getSlot( "state" ) );
    if (tempBooleanValue != null) {
      javaInst.setState(tempBooleanValue);
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "evaluatedSolution" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("PossibleSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setEvaluatedSolution( (PossibleSolution) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"evaluatedSolution\" in instance " + instanceName);
        }
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "certaintyDegree" ) );
    if (tempSymbolValue != null) {
      javaInst.setCertaintyDegree(tempSymbolValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Hypothesis
  */
  public Hypothesis getHypothesis(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Hypothesis)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Hypothesis javaInst = new DefaultHypothesis(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "justification" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setJustification( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"justification\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "description" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescription( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"description\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "possibleSolutions" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("PossibleSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addPossibleSolutions( (PossibleSolution) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"possibleSolutions\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "unmatchedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setUnmatchedDescription( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"unmatchedDescription\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: WeightedDescription
  */
  public WeightedDescription getWeightedDescription(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (WeightedDescription)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    WeightedDescription javaInst = new DefaultWeightedDescription(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "weightedDescriptors" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("WeightedDescriptor") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addWeightedDescriptors( (WeightedDescriptor) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"weightedDescriptors\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * It's a subclass of a defined term
   * Protege name: Attribute
  */
  public Attribute getAttribute(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Attribute)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Attribute javaInst = new DefaultAttribute(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "apliesTo" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addApliesTo( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "describedBy" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addDescribedBy( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "definition" ) );
    if (tempStringValue != null) {
      javaInst.setDefinition(tempStringValue);
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst.setTerm(tempStringValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Case
  */
  public Case getCase(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Case)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Case javaInst = new DefaultCase(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problem" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problem\" in instance " + instanceName);
        }
    }

    tempBooleanValue = getBooleanValue( protegeInst, kb.getSlot( "state" ) );
    if (tempBooleanValue != null) {
      javaInst.setState(tempBooleanValue);
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "solution" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Solution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSolution( (Solution) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"solution\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Problem
  */
  public Problem getProblem(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Problem)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Problem javaInst = new DefaultProblem(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "goalRank" ) );
    if (tempSymbolValue != null) {
      javaInst.setGoalRank(tempSymbolValue);
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "description" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescription( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"description\" in instance " + instanceName);
        }
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "leastSimilarityDegree" ) );
    if (tempSymbolValue != null) {
      javaInst.setLeastSimilarityDegree(tempSymbolValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Value
  */
  public Value getValue(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Value)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Value javaInst = new DefaultValue(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "describes" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addDescribes( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"describes\" in instance " + instanceName);
        }
      }
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "measuringUnit" ) );
    if (tempSymbolValue != null) {
      javaInst.setMeasuringUnit(tempSymbolValue);
    }

    return javaInst;
  }

  /**
   * It's a subclass of a defined term
   * Protege name: State
  */
  public State getState(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (State)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    State javaInst = new DefaultState(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "describes" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addDescribes( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"describes\" in instance " + instanceName);
        }
      }
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "definition" ) );
    if (tempStringValue != null) {
      javaInst.setDefinition(tempStringValue);
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst.setTerm(tempStringValue);
    }

    return javaInst;
  }

  /**
   * Protege name: WeightedDescriptor
  */
  public WeightedDescriptor getWeightedDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (WeightedDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    WeightedDescriptor javaInst = new DefaultWeightedDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "modifier" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Modifier") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setModifier( (Modifier) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"modifier\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "descriptor" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Descriptor") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescriptor( (Descriptor) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"descriptor\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: PossibleSolution
  */
  public PossibleSolution getPossibleSolution(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (PossibleSolution)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    PossibleSolution javaInst = new DefaultPossibleSolution(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "unconfirmedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setUnconfirmedDescription( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"unconfirmedDescription\" in instance " + instanceName);
        }
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "points" ) );
    if (tempFloatValue != null) {
      javaInst.setPoints(tempFloatValue);
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "doubtfulDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDoubtfulDescription( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"doubtfulDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "solutionDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSolutionDescription( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"solutionDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "confirmedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setConfirmedDescription( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"confirmedDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "possibleSolution" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setPossibleSolution( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "contradictions" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setContradictions( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"contradictions\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Modifier
  */
  public Modifier getModifier(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Modifier)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Modifier javaInst = new DefaultModifier(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "structureWeight" ) );
    if (tempFloatValue != null) {
      javaInst.setStructureWeight(tempFloatValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "attributeWeight" ) );
    if (tempFloatValue != null) {
      javaInst.setAttributeWeight(tempFloatValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "scoreWeight" ) );
    if (tempFloatValue != null) {
      javaInst.setScoreWeight(tempFloatValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Taxon
  */
  public Taxon getTaxon(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Taxon)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Taxon javaInst = new DefaultTaxon(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "level" ) );
    if (tempSymbolValue != null) {
      javaInst.setLevel(tempSymbolValue);
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "name" ) );
    if (tempStringValue != null) {
      javaInst.setName(tempStringValue);
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "weightedDescription" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("WeightedDescription") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setWeightedDescription( (WeightedDescription) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"weightedDescription\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "predecessor" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setPredecessor( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"predecessor\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successors" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessors( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successors\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Define the terms utilized in the taxonomic  hierarchy
   * Protege name: DefinedTerm
  */
  public DefinedTerm getDefinedTerm(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (DefinedTerm)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    DefinedTerm javaInst = new DefaultDefinedTerm(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempStringValue = getStringValue( protegeInst, kb.getSlot( "definition" ) );
    if (tempStringValue != null) {
      javaInst.setDefinition(tempStringValue);
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "term" ) );
    if (tempStringValue != null) {
      javaInst.setTerm(tempStringValue);
    }

    return javaInst;
  }

  /**
   * Protege name: RangeValue
  */
  public RangeValue getRangeValue(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (RangeValue)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    RangeValue javaInst = new DefaultRangeValue(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "upperBound" ) );
    if (tempFloatValue != null) {
      javaInst.setUpperBound(tempFloatValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "lowerBound" ) );
    if (tempFloatValue != null) {
      javaInst.setLowerBound(tempFloatValue);
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "describes" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addDescribes( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"describes\" in instance " + instanceName);
        }
      }
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "measuringUnit" ) );
    if (tempSymbolValue != null) {
      javaInst.setMeasuringUnit(tempSymbolValue);
    }

    return javaInst;
  }

  /**
   * Protege name: SingleValue
  */
  public SingleValue getSingleValue(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SingleValue)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SingleValue javaInst = new DefaultSingleValue(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "describes" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addDescribes( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"describes\" in instance " + instanceName);
        }
      }
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "measuringUnit" ) );
    if (tempSymbolValue != null) {
      javaInst.setMeasuringUnit(tempSymbolValue);
    }

    tempFloatValue = getFloatValue( protegeInst, kb.getSlot( "value" ) );
    if (tempFloatValue != null) {
      javaInst.setValue(tempFloatValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Solution
  */
  public Solution getSolution(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Solution)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Solution javaInst = new DefaultSolution(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "justification" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Description") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setJustification( (Description) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"justification\" in instance " + instanceName);
        }
    }

    tempStringValue = getStringValue( protegeInst, kb.getSlot( "name" ) );
    if (tempStringValue != null) {
      javaInst.setName(tempStringValue);
    }

    tempSymbolValue = getStringValue( protegeInst, kb.getSlot( "rank" ) );
    if (tempSymbolValue != null) {
      javaInst.setRank(tempSymbolValue);
    }

    return javaInst;
  }

  /**
   * Protege name: Descriptor
  */
  public Descriptor getDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Descriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Descriptor javaInst = new DefaultDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: SVHeuristicDescriptor
  */
  public SVHeuristicDescriptor getSVHeuristicDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SVHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SVHeuristicDescriptor javaInst = new DefaultSVHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: RVHeuristicDescriptor
  */
  public RVHeuristicDescriptor getRVHeuristicDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (RVHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    RVHeuristicDescriptor javaInst = new DefaultRVHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: Description
  */
  public Description getDescription(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Description)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Description javaInst = new DefaultDescription(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "descriptors" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Descriptor") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addDescriptors( (Descriptor) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"descriptors\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: QualitativeHeuristicDescriptor
  */
  public QualitativeHeuristicDescriptor getQualitativeHeuristicDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (QualitativeHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    QualitativeHeuristicDescriptor javaInst = new DefaultQualitativeHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: SSHeuristicDescriptor
  */
  public SSHeuristicDescriptor getSSHeuristicDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SSHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SSHeuristicDescriptor javaInst = new DefaultSSHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: MSHeuristicDescriptor
  */
  public MSHeuristicDescriptor getMSHeuristicDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (MSHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    MSHeuristicDescriptor javaInst = new DefaultMSHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: QuantitativeHeuristicDescriptor
  */
  public QuantitativeHeuristicDescriptor getQuantitativeHeuristicDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (QuantitativeHeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    QuantitativeHeuristicDescriptor javaInst = new DefaultQuantitativeHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: QuantitativeCharacterDescriptor
  */
  public QuantitativeCharacterDescriptor getQuantitativeCharacterDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (QuantitativeCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    QuantitativeCharacterDescriptor javaInst = new DefaultQuantitativeCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: SVCharacterDescriptor
  */
  public SVCharacterDescriptor getSVCharacterDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SVCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SVCharacterDescriptor javaInst = new DefaultSVCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: RVCharacterDescriptor
  */
  public RVCharacterDescriptor getRVCharacterDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (RVCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    RVCharacterDescriptor javaInst = new DefaultRVCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: HeuristicDescriptor
  */
  public HeuristicDescriptor getHeuristicDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (HeuristicDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    HeuristicDescriptor javaInst = new DefaultHeuristicDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: CharacterDescriptor
  */
  public CharacterDescriptor getCharacterDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (CharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    CharacterDescriptor javaInst = new DefaultCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: QualitativeCharacterDescriptor
  */
  public QualitativeCharacterDescriptor getQualitativeCharacterDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (QualitativeCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    QualitativeCharacterDescriptor javaInst = new DefaultQualitativeCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: SSCharacterDescriptor
  */
  public SSCharacterDescriptor getSSCharacterDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (SSCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    SSCharacterDescriptor javaInst = new DefaultSSCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: MSCharacterDescriptor
  */
  public MSCharacterDescriptor getMSCharacterDescriptor(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (MSCharacterDescriptor)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    MSCharacterDescriptor javaInst = new DefaultMSCharacterDescriptor(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "structure" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setStructure( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: Retrieve
  */
  public Retrieve getRetrieve(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Retrieve)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Retrieve javaInst = new DefaultRetrieve(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "similarTo" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSimilarTo( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"similarTo\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Adapt
  */
  public Adapt getAdapt(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Adapt)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Adapt javaInst = new DefaultAdapt(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "to" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTo( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"to\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: Evaluate
  */
  public Evaluate getEvaluate(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Evaluate)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Evaluate javaInst = new DefaultEvaluate(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "to" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTo( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"to\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: Select
  */
  public Select getSelect(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Select)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Select javaInst = new DefaultSelect(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "to" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTo( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"to\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problem" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problem\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: Resolve
  */
  public Resolve getResolve(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Resolve)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Resolve javaInst = new DefaultResolve(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problem" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problem\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Retain
  */
  public Retain getRetain(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Retain)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Retain javaInst = new DefaultRetain(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "case" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Case") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setCase( (Case) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"case\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsDescriptiveElement
  */
  public IsDescriptiveElement getIsDescriptiveElement(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsDescriptiveElement)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsDescriptiveElement javaInst = new DefaultIsDescriptiveElement(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "descriptiveElement" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescriptiveElement( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    return javaInst;
  }

  /**
   * Protege name: IsSheetTaxon
  */
  public IsSheetTaxon getIsSheetTaxon(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsSheetTaxon)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsSheetTaxon javaInst = new DefaultIsSheetTaxon(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "taxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"taxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Describes
  */
  public Describes getDescribes(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Describes)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Describes javaInst = new DefaultDescribes(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: IsRootTaxon
  */
  public IsRootTaxon getIsRootTaxon(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsRootTaxon)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsRootTaxon javaInst = new DefaultIsRootTaxon(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "taxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"taxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: DescribedBy
  */
  public DescribedBy getDescribedBy(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (DescribedBy)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    DescribedBy javaInst = new DefaultDescribedBy(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "score" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addScore( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: IsPredecessorTaxonOf
  */
  public IsPredecessorTaxonOf getIsPredecessorTaxonOf(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsPredecessorTaxonOf)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsPredecessorTaxonOf javaInst = new DefaultIsPredecessorTaxonOf(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "objectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setObjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"objectTaxon\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "subjectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSubjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"subjectTaxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: AppliesTo
  */
  public AppliesTo getAppliesTo(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (AppliesTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    AppliesTo javaInst = new DefaultAppliesTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "descriptiveElement" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescriptiveElement( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    return javaInst;
  }

  /**
   * Protege name: IsSuccessorTaxonOf
  */
  public IsSuccessorTaxonOf getIsSuccessorTaxonOf(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsSuccessorTaxonOf)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsSuccessorTaxonOf javaInst = new DefaultIsSuccessorTaxonOf(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "objectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setObjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"objectTaxon\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "subjectTaxon" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Taxon") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setSubjectTaxon( (Taxon) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"subjectTaxon\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: Owns
  */
  public Owns getOwns(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (Owns)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    Owns javaInst = new DefaultOwns(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "attribute" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Attribute") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setAttribute( (Attribute) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"attribute\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "descriptiveElement" ) );
    if (tempInstanceValue != null) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setDescriptiveElement( (Object) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
    }

    return javaInst;
  }

  /**
   * Protege name: IsTheMostReasonableTo
  */
  public IsTheMostReasonableTo getIsTheMostReasonableTo(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsTheMostReasonableTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsTheMostReasonableTo javaInst = new DefaultIsTheMostReasonableTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problem" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problem\" in instance " + instanceName);
        }
    }

    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "proposedSolution" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("ProposedSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProposedSolution( (ProposedSolution) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"proposedSolution\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsNegative
  */
  public IsNegative getIsNegative(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsNegative)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsNegative javaInst = new DefaultIsNegative(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "case" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Case") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setCase( (Case) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"case\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: IsPositive
  */
  public IsPositive getIsPositive(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (IsPositive)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    IsPositive javaInst = new DefaultIsPositive(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "case" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Case") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setCase( (Case) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"case\" in instance " + instanceName);
        }
    }

    return javaInst;
  }

  /**
   * Protege name: AreReasonableSolutionsTo
  */
  public AreReasonableSolutionsTo getAreReasonableSolutionsTo(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (AreReasonableSolutionsTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    AreReasonableSolutionsTo javaInst = new DefaultAreReasonableSolutionsTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problem" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problem\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "proposedSolutions" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("ProposedSolution") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addProposedSolutions( (ProposedSolution) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"proposedSolutions\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: AreSimilarTo
  */
  public AreSimilarTo getAreSimilarTo(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (AreSimilarTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    AreSimilarTo javaInst = new DefaultAreSimilarTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "problem" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setProblem( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"problem\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: AreEvaluatedSolutionsTo
  */
  public AreEvaluatedSolutionsTo getAreEvaluatedSolutionsTo(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (AreEvaluatedSolutionsTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    AreEvaluatedSolutionsTo javaInst = new DefaultAreEvaluatedSolutionsTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "to" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTo( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"to\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  /**
   * Protege name: AreSelectedSolutionsTo
  */
  public AreSelectedSolutionsTo getAreSelectedSolutionsTo(String instanceName) throws CBRKbBasedFactoryException{
    Object jadeInstance = beanInstances.get(instanceName);
    if (jadeInstance != null)
      return (AreSelectedSolutionsTo)jadeInstance;

    Instance protegeInst = kb.getInstance( instanceName );

    if (protegeInst == null) {
      throw new CBRKbBasedFactoryException("Invalid Protege instance name: " + instanceName + ". No Jade instance was created.");
    }

    AreSelectedSolutionsTo javaInst = new DefaultAreSelectedSolutionsTo(instanceName);

    beanInstances.put(instanceName, javaInst);

    //javaInst set all properties


    tempInstanceValue = getInstanceValue( protegeInst, kb.getSlot( "to" ) );
    if (tempInstanceValue != null) {
        if (tempInstanceValue.hasType(kb.getCls("Problem") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.setTo( (Problem) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"to\" in instance " + instanceName);
        }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "successfulConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addSuccessfulConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"successfulConflictSet\" in instance " + instanceName);
        }
      }
    }

    tempInstanceValues = getInstanceValues( protegeInst, kb.getSlot( "failureConflictSet" ) );
    if (tempInstanceValues != null) {
      for (Instance instValue : tempInstanceValues) {
        tempInstanceValue = instValue;
        if (tempInstanceValue.hasType(kb.getCls("Hypothesis") )) {
          try {
            Object referredBean = getJadeInstanceFor(tempInstanceValue);

            if (referredBean != null) {
              javaInst.addFailureConflictSet( (Hypothesis) referredBean);
            }
          } catch (CBRKbBasedFactoryException e) {
            e.printStackTrace();
          }
        }
        else {
          throw new CBRKbBasedFactoryException("Invalid type for instance " + tempInstanceValue + " referred by slot \"failureConflictSet\" in instance " + instanceName);
        }
      }
    }

    return javaInst;
  }

  //Typed access methods to slot values
  private static Float getFloatValue(Instance theInst, Slot theSlot) {
    return (Float)theInst.getOwnSlotValue(theSlot);
  }

  private static Instance getInstanceValue(Instance theInst, Slot theSlot) {
    return (Instance)theInst.getOwnSlotValue(theSlot);
  }

  private static java.util.ArrayList<Instance> getInstanceValues(Instance theInst, Slot theSlot) {
    return new java.util.ArrayList<Instance>(theInst.getOwnSlotValues(theSlot));
  }

  private static String getStringValue(Instance theInst, Slot theSlot) {
    return (String)theInst.getOwnSlotValue(theSlot);
  }

  private static Boolean getBooleanValue(Instance theInst, Slot theSlot) {
    return (Boolean)theInst.getOwnSlotValue(theSlot);
  }

  private static String getStringValue(Instance theInst, Slot theSlot) {
    return (String)theInst.getOwnSlotValue(theSlot);
  }


  public Object getJadeInstanceFor(Instance tempInstanceValue) throws CBRKbBasedFactoryException {
    //TODO test for multiple types
    String methodName = typeToMethodName.get(tempInstanceValue.getDirectType().getName());
    if (methodName != null) {
      try {
        Method method = this.getClass().getMethod(methodName, new Class[] {Class.forName("java.lang.String")});
        return method.invoke(this, new Object[] {tempInstanceValue.getName()});
      }
      catch (SecurityException e) {
         throw new CBRKbBasedFactoryException(e);
      } catch (NoSuchMethodException e) {
         throw new CBRKbBasedFactoryException(e);
      } catch (ClassNotFoundException e) {
         throw new CBRKbBasedFactoryException(e);
      }
      catch (IllegalArgumentException e) {
         throw new CBRKbBasedFactoryException("Exception while invoking method " + methodName + " for instance " + tempInstanceValue.getName(), e);
      } catch (IllegalAccessException e) {
         throw new CBRKbBasedFactoryException("Exception while invoking method " + methodName + " for instance " + tempInstanceValue.getName(), e);
      } catch (InvocationTargetException e) {
         throw new CBRKbBasedFactoryException("Exception while invoking method " + methodName + " for instance " + tempInstanceValue.getName(), e);
      }
    }
    return null;
  }

  static {
    typeToMethodName.put("Structure", "getStructure");
    typeToMethodName.put("EnvironmentalCategory", "getEnvironmentalCategory");
    typeToMethodName.put("ProposedSolution", "getProposedSolution");
    typeToMethodName.put("Hypothesis", "getHypothesis");
    typeToMethodName.put("WeightedDescription", "getWeightedDescription");
    typeToMethodName.put("Attribute", "getAttribute");
    typeToMethodName.put("Case", "getCase");
    typeToMethodName.put("Problem", "getProblem");
    typeToMethodName.put("Value", "getValue");
    typeToMethodName.put("State", "getState");
    typeToMethodName.put("WeightedDescriptor", "getWeightedDescriptor");
    typeToMethodName.put("PossibleSolution", "getPossibleSolution");
    typeToMethodName.put("Modifier", "getModifier");
    typeToMethodName.put("Taxon", "getTaxon");
    typeToMethodName.put("DefinedTerm", "getDefinedTerm");
    typeToMethodName.put("RangeValue", "getRangeValue");
    typeToMethodName.put("SingleValue", "getSingleValue");
    typeToMethodName.put("Solution", "getSolution");
    typeToMethodName.put("Descriptor", "getDescriptor");
    typeToMethodName.put("SVHeuristicDescriptor", "getSVHeuristicDescriptor");
    typeToMethodName.put("RVHeuristicDescriptor", "getRVHeuristicDescriptor");
    typeToMethodName.put("Description", "getDescription");
    typeToMethodName.put("QualitativeHeuristicDescriptor", "getQualitativeHeuristicDescriptor");
    typeToMethodName.put("SSHeuristicDescriptor", "getSSHeuristicDescriptor");
    typeToMethodName.put("MSHeuristicDescriptor", "getMSHeuristicDescriptor");
    typeToMethodName.put("QuantitativeHeuristicDescriptor", "getQuantitativeHeuristicDescriptor");
    typeToMethodName.put("QuantitativeCharacterDescriptor", "getQuantitativeCharacterDescriptor");
    typeToMethodName.put("SVCharacterDescriptor", "getSVCharacterDescriptor");
    typeToMethodName.put("RVCharacterDescriptor", "getRVCharacterDescriptor");
    typeToMethodName.put("HeuristicDescriptor", "getHeuristicDescriptor");
    typeToMethodName.put("CharacterDescriptor", "getCharacterDescriptor");
    typeToMethodName.put("QualitativeCharacterDescriptor", "getQualitativeCharacterDescriptor");
    typeToMethodName.put("SSCharacterDescriptor", "getSSCharacterDescriptor");
    typeToMethodName.put("MSCharacterDescriptor", "getMSCharacterDescriptor");
    typeToMethodName.put("Retrieve", "getRetrieve");
    typeToMethodName.put("Adapt", "getAdapt");
    typeToMethodName.put("Evaluate", "getEvaluate");
    typeToMethodName.put("Select", "getSelect");
    typeToMethodName.put("Resolve", "getResolve");
    typeToMethodName.put("Retain", "getRetain");
    typeToMethodName.put("IsDescriptiveElement", "getIsDescriptiveElement");
    typeToMethodName.put("IsSheetTaxon", "getIsSheetTaxon");
    typeToMethodName.put("Describes", "getDescribes");
    typeToMethodName.put("IsRootTaxon", "getIsRootTaxon");
    typeToMethodName.put("DescribedBy", "getDescribedBy");
    typeToMethodName.put("IsPredecessorTaxonOf", "getIsPredecessorTaxonOf");
    typeToMethodName.put("AppliesTo", "getAppliesTo");
    typeToMethodName.put("IsSuccessorTaxonOf", "getIsSuccessorTaxonOf");
    typeToMethodName.put("Owns", "getOwns");
    typeToMethodName.put("IsTheMostReasonableTo", "getIsTheMostReasonableTo");
    typeToMethodName.put("IsNegative", "getIsNegative");
    typeToMethodName.put("IsPositive", "getIsPositive");
    typeToMethodName.put("AreReasonableSolutionsTo", "getAreReasonableSolutionsTo");
    typeToMethodName.put("AreSimilarTo", "getAreSimilarTo");
    typeToMethodName.put("AreEvaluatedSolutionsTo", "getAreEvaluatedSolutionsTo");
    typeToMethodName.put("AreSelectedSolutionsTo", "getAreSelectedSolutionsTo");
  }

}
