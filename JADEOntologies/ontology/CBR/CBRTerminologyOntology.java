// file: CBRTerminologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology.CBR;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: CBRTerminologyOntology.java
 * @author ontology bean generator
 * @version 2009/10/7, 18:01:54
 */
public class CBRTerminologyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -192457562360579226L;

  //NAME
  public static final String ONTOLOGY_NAME = "CBRTerminology";
  // The singleton instance of this ontology
  private static Ontology theInstance = new CBRTerminologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String OWNS_ATTRIBUTE="attribute";
    public static final String OWNS_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String OWNS="Owns";
    public static final String APLIESTO_ATTRIBUTE="attribute";
    public static final String APLIESTO_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String APLIESTO="ApliesTo";
    public static final String DESCRIBES_ATTRIBUTE="attribute";
    public static final String DESCRIBES_SCORE="score";
    public static final String DESCRIBES="Describes";
    public static final String ISSUCCESSORTAXONOF_OBJECTTAXON="objectTaxon";
    public static final String ISSUCCESSORTAXONOF_SUBJECTTAXON="subjectTaxon";
    public static final String ISSUCCESSORTAXONOF="IsSuccessorTaxonOf";
    public static final String DESCRIBEDBY_ATTRIBUTE="attribute";
    public static final String DESCRIBEDBY_SCORE="score";
    public static final String DESCRIBEDBY="DescribedBy";
    public static final String ISPREDECESSORTAXONOF_OBJECTTAXON="objectTaxon";
    public static final String ISPREDECESSORTAXONOF_SUBJECTTAXON="subjectTaxon";
    public static final String ISPREDECESSORTAXONOF="IsPredecessorTaxonOf";
    public static final String ISROOTTAXON_TAXON="taxon";
    public static final String ISROOTTAXON="IsRootTaxon";
    public static final String ISSHEETTAXON_TAXON="taxon";
    public static final String ISSHEETTAXON="IsSheetTaxon";
    public static final String ISPOSITIVE_CASE="case";
    public static final String ISPOSITIVE="IsPositive";
    public static final String ISNEGATIVE_CASE="case";
    public static final String ISNEGATIVE="IsNegative";
    public static final String ARESIMILARTO_PROBLEM="problem";
    public static final String ARESIMILARTO_FAILURECONFLICTSET="failureConflictSet";
    public static final String ARESIMILARTO_SUCCESSFULCONFLICTSET="successfulConflictSet";
    public static final String ARESIMILARTO="AreSimilarTo";
    public static final String AREREASONABLESOLUTIONSTO_PROBLEM="problem";
    public static final String AREREASONABLESOLUTIONSTO_PROPOSEDSOLUTIONS="proposedSolutions";
    public static final String AREREASONABLESOLUTIONSTO="AreReasonableSolutionsTo";
    public static final String ISTHEMOSTREASONABLETO_PROBLEM="problem";
    public static final String ISTHEMOSTREASONABLETO_PROPOSEDSOLUTION="proposedSolution";
    public static final String ISTHEMOSTREASONABLETO="IsTheMostReasonableTo";
    public static final String RESOLVE_PROBLEM="problem";
    public static final String RESOLVE="Resolve";
    public static final String RETAIN_CASE="case";
    public static final String RETAIN="Retain";
    public static final String RETRIEVE_SIMILARTO="similarTo";
    public static final String RETRIEVE="Retrieve";
    public static final String ADAPT_TO="to";
    public static final String ADAPT_FAILURECONFLICTSET="failureConflictSet";
    public static final String ADAPT_SUCCESSFULCONFLICTSET="successfulConflictSet";
    public static final String ADAPT="Adapt";
    public static final String STATE_DESCRIBES="describes";
    public static final String STATE="State";
    public static final String VALUE_DESCRIBES="describes";
    public static final String VALUE_MEASURINGUNIT="measuringUnit";
    public static final String VALUE="Value";
    public static final String WEIGHTEDDESCRIPTION_WEIGHTEDDESCRIPTORS="weightedDescriptors";
    public static final String WEIGHTEDDESCRIPTION="WeightedDescription";
    public static final String STRUCTURE_OWNS="owns";
    public static final String STRUCTURE="Structure";
    public static final String TAXON_WEIGHTEDDESCRIPTION="weightedDescription";
    public static final String TAXON_PREDECESSOR="predecessor";
    public static final String TAXON_NAME="name";
    public static final String TAXON_LEVEL="level";
    public static final String TAXON_SUCCESSORS="successors";
    public static final String TAXON="Taxon";
    public static final String ENVIRONMENTALCATEGORY_OWNS="owns";
    public static final String ENVIRONMENTALCATEGORY="EnvironmentalCategory";
    public static final String HYPOTHESIS_UNMATCHEDDESCRIPTION="unmatchedDescription";
    public static final String HYPOTHESIS_JUSTIFICATION="justification";
    public static final String HYPOTHESIS_DESCRIPTION="description";
    public static final String HYPOTHESIS_POSSIBLESOLUTIONS="possibleSolutions";
    public static final String HYPOTHESIS="Hypothesis";
    public static final String ATTRIBUTE_DESCRIBEDBY="describedBy";
    public static final String ATTRIBUTE_APLIESTO="apliesTo";
    public static final String ATTRIBUTE="Attribute";
    public static final String SSCHARACTERDESCRIPTOR="SSCharacterDescriptor";
    public static final String MSCHARACTERDESCRIPTOR="MSCharacterDescriptor";
    public static final String QUANTITATIVECHARACTERDESCRIPTOR="QuantitativeCharacterDescriptor";
    public static final String DEFINEDTERM_TERM="term";
    public static final String DEFINEDTERM_DEFINITION="definition";
    public static final String DEFINEDTERM="DefinedTerm";
    public static final String SVCHARACTERDESCRIPTOR="SVCharacterDescriptor";
    public static final String SINGLEVALUE_VALUE="value";
    public static final String SINGLEVALUE="SingleValue";
    public static final String RVCHARACTERDESCRIPTOR="RVCharacterDescriptor";
    public static final String RANGEVALUE_UPPERBOUND="upperBound";
    public static final String RANGEVALUE_LOWERBOUND="lowerBound";
    public static final String RANGEVALUE="RangeValue";
    public static final String HEURISTICDESCRIPTOR="HeuristicDescriptor";
    public static final String CHARACTERDESCRIPTOR="CharacterDescriptor";
    public static final String QUALITATIVEHEURISTICDESCRIPTOR="QualitativeHeuristicDescriptor";
    public static final String QUALITATIVECHARACTERDESCRIPTOR="QualitativeCharacterDescriptor";
    public static final String SSHEURISTICDESCRIPTOR="SSHeuristicDescriptor";
    public static final String MSHEURISTICDESCRIPTOR="MSHeuristicDescriptor";
    public static final String QUANTITATIVEHEURISTICDESCRIPTOR="QuantitativeHeuristicDescriptor";
    public static final String SVHEURISTICDESCRIPTOR="SVHeuristicDescriptor";
    public static final String RVHEURISTICDESCRIPTOR="RVHeuristicDescriptor";
    public static final String DESCRIPTION_DESCRIPTORS="descriptors";
    public static final String DESCRIPTION="Description";
    public static final String DESCRIPTOR_STRUCTURE="structure";
    public static final String DESCRIPTOR_ATTRIBUTE="attribute";
    public static final String DESCRIPTOR_SCORE="score";
    public static final String DESCRIPTOR="Descriptor";
    public static final String SOLUTION_RANK="rank";
    public static final String SOLUTION_NAME="name";
    public static final String SOLUTION_JUSTIFICATION="justification";
    public static final String SOLUTION="Solution";
    public static final String PROBLEM_LEASTSIMILARITYDEGREE="leastSimilarityDegree";
    public static final String PROBLEM_DESCRIPTION="description";
    public static final String PROBLEM_GOALRANK="goalRank";
    public static final String PROBLEM="Problem";
    public static final String CASE_PROBLEM="problem";
    public static final String CASE_STATE="state";
    public static final String CASE_SOLUTION="solution";
    public static final String CASE="Case";
    public static final String MODIFIER_ATTRIBUTEWEIGHT="attributeWeight";
    public static final String MODIFIER_STRUCTUREWEIGHT="structureWeight";
    public static final String MODIFIER_SCOREWEIGHT="scoreWeight";
    public static final String MODIFIER="Modifier";
    public static final String POSSIBLESOLUTION_UNCONFIRMEDDESCRIPTION="unconfirmedDescription";
    public static final String POSSIBLESOLUTION_POINTS="points";
    public static final String POSSIBLESOLUTION_DOUBTFULDESCRIPTION="doubtfulDescription";
    public static final String POSSIBLESOLUTION_POSSIBLESOLUTION="possibleSolution";
    public static final String POSSIBLESOLUTION_SOLUTIONDESCRIPTION="solutionDescription";
    public static final String POSSIBLESOLUTION_CONTRADICTIONS="contradictions";
    public static final String POSSIBLESOLUTION_CONFIRMEDDESCRIPTION="confirmedDescription";
    public static final String POSSIBLESOLUTION="PossibleSolution";
    public static final String PROPOSEDSOLUTION_STATE="state";
    public static final String PROPOSEDSOLUTION_EVALUATEDSOLUTION="evaluatedSolution";
    public static final String PROPOSEDSOLUTION_CERTAINTYDEGREE="certaintyDegree";
    public static final String PROPOSEDSOLUTION="ProposedSolution";
    public static final String WEIGHTEDDESCRIPTOR_DESCRIPTOR="descriptor";
    public static final String WEIGHTEDDESCRIPTOR_MODIFIER="modifier";
    public static final String WEIGHTEDDESCRIPTOR="WeightedDescriptor";

  /**
   * Constructor
  */
  private CBRTerminologyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema weightedDescriptorSchema = new ConceptSchema(WEIGHTEDDESCRIPTOR);
    add(weightedDescriptorSchema, ontology.CBR.WeightedDescriptor.class);
    ConceptSchema proposedSolutionSchema = new ConceptSchema(PROPOSEDSOLUTION);
    add(proposedSolutionSchema, ontology.CBR.ProposedSolution.class);
    ConceptSchema possibleSolutionSchema = new ConceptSchema(POSSIBLESOLUTION);
    add(possibleSolutionSchema, ontology.CBR.PossibleSolution.class);
    ConceptSchema modifierSchema = new ConceptSchema(MODIFIER);
    add(modifierSchema, ontology.CBR.Modifier.class);
    ConceptSchema caseSchema = new ConceptSchema(CASE);
    add(caseSchema, ontology.CBR.Case.class);
    ConceptSchema problemSchema = new ConceptSchema(PROBLEM);
    add(problemSchema, ontology.CBR.Problem.class);
    ConceptSchema solutionSchema = new ConceptSchema(SOLUTION);
    add(solutionSchema, ontology.CBR.Solution.class);
    ConceptSchema descriptorSchema = new ConceptSchema(DESCRIPTOR);
    add(descriptorSchema, ontology.CBR.Descriptor.class);
    ConceptSchema descriptionSchema = new ConceptSchema(DESCRIPTION);
    add(descriptionSchema, ontology.CBR.Description.class);
    ConceptSchema rvHeuristicDescriptorSchema = new ConceptSchema(RVHEURISTICDESCRIPTOR);
    add(rvHeuristicDescriptorSchema, ontology.CBR.RVHeuristicDescriptor.class);
    ConceptSchema svHeuristicDescriptorSchema = new ConceptSchema(SVHEURISTICDESCRIPTOR);
    add(svHeuristicDescriptorSchema, ontology.CBR.SVHeuristicDescriptor.class);
    ConceptSchema quantitativeHeuristicDescriptorSchema = new ConceptSchema(QUANTITATIVEHEURISTICDESCRIPTOR);
    add(quantitativeHeuristicDescriptorSchema, ontology.CBR.QuantitativeHeuristicDescriptor.class);
    ConceptSchema msHeuristicDescriptorSchema = new ConceptSchema(MSHEURISTICDESCRIPTOR);
    add(msHeuristicDescriptorSchema, ontology.CBR.MSHeuristicDescriptor.class);
    ConceptSchema ssHeuristicDescriptorSchema = new ConceptSchema(SSHEURISTICDESCRIPTOR);
    add(ssHeuristicDescriptorSchema, ontology.CBR.SSHeuristicDescriptor.class);
    ConceptSchema qualitativeCharacterDescriptorSchema = new ConceptSchema(QUALITATIVECHARACTERDESCRIPTOR);
    add(qualitativeCharacterDescriptorSchema, ontology.CBR.QualitativeCharacterDescriptor.class);
    ConceptSchema qualitativeHeuristicDescriptorSchema = new ConceptSchema(QUALITATIVEHEURISTICDESCRIPTOR);
    add(qualitativeHeuristicDescriptorSchema, ontology.CBR.QualitativeHeuristicDescriptor.class);
    ConceptSchema characterDescriptorSchema = new ConceptSchema(CHARACTERDESCRIPTOR);
    add(characterDescriptorSchema, ontology.CBR.CharacterDescriptor.class);
    ConceptSchema heuristicDescriptorSchema = new ConceptSchema(HEURISTICDESCRIPTOR);
    add(heuristicDescriptorSchema, ontology.CBR.HeuristicDescriptor.class);
    ConceptSchema rangeValueSchema = new ConceptSchema(RANGEVALUE);
    add(rangeValueSchema, ontology.CBR.RangeValue.class);
    ConceptSchema rvCharacterDescriptorSchema = new ConceptSchema(RVCHARACTERDESCRIPTOR);
    add(rvCharacterDescriptorSchema, ontology.CBR.RVCharacterDescriptor.class);
    ConceptSchema singleValueSchema = new ConceptSchema(SINGLEVALUE);
    add(singleValueSchema, ontology.CBR.SingleValue.class);
    ConceptSchema svCharacterDescriptorSchema = new ConceptSchema(SVCHARACTERDESCRIPTOR);
    add(svCharacterDescriptorSchema, ontology.CBR.SVCharacterDescriptor.class);
    ConceptSchema definedTermSchema = new ConceptSchema(DEFINEDTERM);
    add(definedTermSchema, ontology.CBR.DefinedTerm.class);
    ConceptSchema quantitativeCharacterDescriptorSchema = new ConceptSchema(QUANTITATIVECHARACTERDESCRIPTOR);
    add(quantitativeCharacterDescriptorSchema, ontology.CBR.QuantitativeCharacterDescriptor.class);
    ConceptSchema msCharacterDescriptorSchema = new ConceptSchema(MSCHARACTERDESCRIPTOR);
    add(msCharacterDescriptorSchema, ontology.CBR.MSCharacterDescriptor.class);
    ConceptSchema ssCharacterDescriptorSchema = new ConceptSchema(SSCHARACTERDESCRIPTOR);
    add(ssCharacterDescriptorSchema, ontology.CBR.SSCharacterDescriptor.class);
    ConceptSchema attributeSchema = new ConceptSchema(ATTRIBUTE);
    add(attributeSchema, ontology.CBR.Attribute.class);
    ConceptSchema hypothesisSchema = new ConceptSchema(HYPOTHESIS);
    add(hypothesisSchema, ontology.CBR.Hypothesis.class);
    ConceptSchema environmentalCategorySchema = new ConceptSchema(ENVIRONMENTALCATEGORY);
    add(environmentalCategorySchema, ontology.CBR.EnvironmentalCategory.class);
    ConceptSchema taxonSchema = new ConceptSchema(TAXON);
    add(taxonSchema, ontology.CBR.Taxon.class);
    ConceptSchema structureSchema = new ConceptSchema(STRUCTURE);
    add(structureSchema, ontology.CBR.Structure.class);
    ConceptSchema weightedDescriptionSchema = new ConceptSchema(WEIGHTEDDESCRIPTION);
    add(weightedDescriptionSchema, ontology.CBR.WeightedDescription.class);
    ConceptSchema valueSchema = new ConceptSchema(VALUE);
    add(valueSchema, ontology.CBR.Value.class);
    ConceptSchema stateSchema = new ConceptSchema(STATE);
    add(stateSchema, ontology.CBR.State.class);

    // adding AgentAction(s)
    AgentActionSchema adaptSchema = new AgentActionSchema(ADAPT);
    add(adaptSchema, ontology.CBR.Adapt.class);
    AgentActionSchema retrieveSchema = new AgentActionSchema(RETRIEVE);
    add(retrieveSchema, ontology.CBR.Retrieve.class);
    AgentActionSchema retainSchema = new AgentActionSchema(RETAIN);
    add(retainSchema, ontology.CBR.Retain.class);
    AgentActionSchema resolveSchema = new AgentActionSchema(RESOLVE);
    add(resolveSchema, ontology.CBR.Resolve.class);

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema isTheMostReasonableToSchema = new PredicateSchema(ISTHEMOSTREASONABLETO);
    add(isTheMostReasonableToSchema, ontology.CBR.IsTheMostReasonableTo.class);
    PredicateSchema areReasonableSolutionsToSchema = new PredicateSchema(AREREASONABLESOLUTIONSTO);
    add(areReasonableSolutionsToSchema, ontology.CBR.AreReasonableSolutionsTo.class);
    PredicateSchema areSimilarToSchema = new PredicateSchema(ARESIMILARTO);
    add(areSimilarToSchema, ontology.CBR.AreSimilarTo.class);
    PredicateSchema isNegativeSchema = new PredicateSchema(ISNEGATIVE);
    add(isNegativeSchema, ontology.CBR.IsNegative.class);
    PredicateSchema isPositiveSchema = new PredicateSchema(ISPOSITIVE);
    add(isPositiveSchema, ontology.CBR.IsPositive.class);
    PredicateSchema isSheetTaxonSchema = new PredicateSchema(ISSHEETTAXON);
    add(isSheetTaxonSchema, ontology.CBR.IsSheetTaxon.class);
    PredicateSchema isRootTaxonSchema = new PredicateSchema(ISROOTTAXON);
    add(isRootTaxonSchema, ontology.CBR.IsRootTaxon.class);
    PredicateSchema isPredecessorTaxonOfSchema = new PredicateSchema(ISPREDECESSORTAXONOF);
    add(isPredecessorTaxonOfSchema, ontology.CBR.IsPredecessorTaxonOf.class);
    PredicateSchema describedBySchema = new PredicateSchema(DESCRIBEDBY);
    add(describedBySchema, ontology.CBR.DescribedBy.class);
    PredicateSchema isSuccessorTaxonOfSchema = new PredicateSchema(ISSUCCESSORTAXONOF);
    add(isSuccessorTaxonOfSchema, ontology.CBR.IsSuccessorTaxonOf.class);
    PredicateSchema describesSchema = new PredicateSchema(DESCRIBES);
    add(describesSchema, ontology.CBR.Describes.class);
    PredicateSchema apliesToSchema = new PredicateSchema(APLIESTO);
    add(apliesToSchema, ontology.CBR.ApliesTo.class);
    PredicateSchema ownsSchema = new PredicateSchema(OWNS);
    add(ownsSchema, ontology.CBR.Owns.class);


    // adding fields
    weightedDescriptorSchema.add(WEIGHTEDDESCRIPTOR_MODIFIER, modifierSchema, ObjectSchema.MANDATORY);
    weightedDescriptorSchema.add(WEIGHTEDDESCRIPTOR_DESCRIPTOR, descriptorSchema, ObjectSchema.MANDATORY);
    proposedSolutionSchema.add(PROPOSEDSOLUTION_CERTAINTYDEGREE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    proposedSolutionSchema.add(PROPOSEDSOLUTION_EVALUATEDSOLUTION, possibleSolutionSchema, ObjectSchema.MANDATORY);
    proposedSolutionSchema.add(PROPOSEDSOLUTION_STATE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.MANDATORY);
    possibleSolutionSchema.add(POSSIBLESOLUTION_CONFIRMEDDESCRIPTION, descriptionSchema, ObjectSchema.OPTIONAL);
    possibleSolutionSchema.add(POSSIBLESOLUTION_CONTRADICTIONS, descriptionSchema, ObjectSchema.OPTIONAL);
    possibleSolutionSchema.add(POSSIBLESOLUTION_SOLUTIONDESCRIPTION, descriptionSchema, ObjectSchema.MANDATORY);
    possibleSolutionSchema.add(POSSIBLESOLUTION_POSSIBLESOLUTION, new ConceptSchema("Concept"), ObjectSchema.MANDATORY);
    possibleSolutionSchema.add(POSSIBLESOLUTION_DOUBTFULDESCRIPTION, descriptionSchema, ObjectSchema.OPTIONAL);
    possibleSolutionSchema.add(POSSIBLESOLUTION_POINTS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    possibleSolutionSchema.add(POSSIBLESOLUTION_UNCONFIRMEDDESCRIPTION, descriptionSchema, ObjectSchema.OPTIONAL);
    modifierSchema.add(MODIFIER_SCOREWEIGHT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    modifierSchema.add(MODIFIER_STRUCTUREWEIGHT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    modifierSchema.add(MODIFIER_ATTRIBUTEWEIGHT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    caseSchema.add(CASE_SOLUTION, solutionSchema, ObjectSchema.MANDATORY);
    caseSchema.add(CASE_STATE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.MANDATORY);
    caseSchema.add(CASE_PROBLEM, problemSchema, ObjectSchema.MANDATORY);
    problemSchema.add(PROBLEM_GOALRANK, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    problemSchema.add(PROBLEM_DESCRIPTION, descriptionSchema, ObjectSchema.MANDATORY);
    problemSchema.add(PROBLEM_LEASTSIMILARITYDEGREE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    solutionSchema.add(SOLUTION_JUSTIFICATION, descriptionSchema, ObjectSchema.OPTIONAL);
    solutionSchema.add(SOLUTION_NAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    solutionSchema.add(SOLUTION_RANK, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    descriptorSchema.add(DESCRIPTOR_SCORE, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    descriptorSchema.add(DESCRIPTOR_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    descriptorSchema.add(DESCRIPTOR_STRUCTURE, new ConceptSchema("Concept"), ObjectSchema.MANDATORY);
    descriptionSchema.add(DESCRIPTION_DESCRIPTORS, descriptorSchema, 1, ObjectSchema.UNLIMITED);
    rangeValueSchema.add(RANGEVALUE_LOWERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    rangeValueSchema.add(RANGEVALUE_UPPERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    singleValueSchema.add(SINGLEVALUE_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    definedTermSchema.add(DEFINEDTERM_DEFINITION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    definedTermSchema.add(DEFINEDTERM_TERM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    attributeSchema.add(ATTRIBUTE_APLIESTO, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    attributeSchema.add(ATTRIBUTE_DESCRIBEDBY, new ConceptSchema("Concept"), 0, ObjectSchema.UNLIMITED);
    hypothesisSchema.add(HYPOTHESIS_POSSIBLESOLUTIONS, possibleSolutionSchema, 1, ObjectSchema.UNLIMITED);
    hypothesisSchema.add(HYPOTHESIS_DESCRIPTION, descriptionSchema, ObjectSchema.MANDATORY);
    hypothesisSchema.add(HYPOTHESIS_JUSTIFICATION, descriptionSchema, ObjectSchema.OPTIONAL);
    hypothesisSchema.add(HYPOTHESIS_UNMATCHEDDESCRIPTION, descriptionSchema, ObjectSchema.OPTIONAL);
    environmentalCategorySchema.add(ENVIRONMENTALCATEGORY_OWNS, attributeSchema, 1, ObjectSchema.UNLIMITED);
    taxonSchema.add(TAXON_SUCCESSORS, taxonSchema, 0, ObjectSchema.UNLIMITED);
    taxonSchema.add(TAXON_LEVEL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    taxonSchema.add(TAXON_NAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    taxonSchema.add(TAXON_PREDECESSOR, taxonSchema, ObjectSchema.OPTIONAL);
    taxonSchema.add(TAXON_WEIGHTEDDESCRIPTION, weightedDescriptionSchema, ObjectSchema.MANDATORY);
    structureSchema.add(STRUCTURE_OWNS, attributeSchema, 1, ObjectSchema.UNLIMITED);
    weightedDescriptionSchema.add(WEIGHTEDDESCRIPTION_WEIGHTEDDESCRIPTORS, weightedDescriptorSchema, 1, ObjectSchema.UNLIMITED);
    valueSchema.add(VALUE_MEASURINGUNIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    valueSchema.add(VALUE_DESCRIBES, attributeSchema, 1, ObjectSchema.UNLIMITED);
    stateSchema.add(STATE_DESCRIBES, attributeSchema, 1, ObjectSchema.UNLIMITED);
    adaptSchema.add(ADAPT_SUCCESSFULCONFLICTSET, hypothesisSchema, 0, ObjectSchema.UNLIMITED);
    adaptSchema.add(ADAPT_FAILURECONFLICTSET, hypothesisSchema, 0, ObjectSchema.UNLIMITED);
    adaptSchema.add(ADAPT_TO, problemSchema, ObjectSchema.MANDATORY);
    retrieveSchema.add(RETRIEVE_SIMILARTO, problemSchema, ObjectSchema.MANDATORY);
    retainSchema.add(RETAIN_CASE, caseSchema, ObjectSchema.MANDATORY);
    resolveSchema.add(RESOLVE_PROBLEM, problemSchema, ObjectSchema.MANDATORY);
    isTheMostReasonableToSchema.add(ISTHEMOSTREASONABLETO_PROPOSEDSOLUTION, proposedSolutionSchema, ObjectSchema.MANDATORY);
    isTheMostReasonableToSchema.add(ISTHEMOSTREASONABLETO_PROBLEM, problemSchema, ObjectSchema.MANDATORY);
    areReasonableSolutionsToSchema.add(AREREASONABLESOLUTIONSTO_PROPOSEDSOLUTIONS, proposedSolutionSchema, 1, ObjectSchema.UNLIMITED);
    areReasonableSolutionsToSchema.add(AREREASONABLESOLUTIONSTO_PROBLEM, problemSchema, ObjectSchema.MANDATORY);
    areSimilarToSchema.add(ARESIMILARTO_SUCCESSFULCONFLICTSET, hypothesisSchema, 0, ObjectSchema.UNLIMITED);
    areSimilarToSchema.add(ARESIMILARTO_FAILURECONFLICTSET, hypothesisSchema, 0, ObjectSchema.UNLIMITED);
    areSimilarToSchema.add(ARESIMILARTO_PROBLEM, problemSchema, ObjectSchema.MANDATORY);
    isNegativeSchema.add(ISNEGATIVE_CASE, caseSchema, ObjectSchema.MANDATORY);
    isPositiveSchema.add(ISPOSITIVE_CASE, caseSchema, ObjectSchema.MANDATORY);
    isSheetTaxonSchema.add(ISSHEETTAXON_TAXON, taxonSchema, ObjectSchema.MANDATORY);
    isRootTaxonSchema.add(ISROOTTAXON_TAXON, taxonSchema, ObjectSchema.MANDATORY);
    isPredecessorTaxonOfSchema.add(ISPREDECESSORTAXONOF_SUBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    isPredecessorTaxonOfSchema.add(ISPREDECESSORTAXONOF_OBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    describedBySchema.add(DESCRIBEDBY_SCORE, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    describedBySchema.add(DESCRIBEDBY_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    isSuccessorTaxonOfSchema.add(ISSUCCESSORTAXONOF_SUBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    isSuccessorTaxonOfSchema.add(ISSUCCESSORTAXONOF_OBJECTTAXON, taxonSchema, ObjectSchema.MANDATORY);
    describesSchema.add(DESCRIBES_SCORE, new ConceptSchema("Concept"), 1, ObjectSchema.UNLIMITED);
    describesSchema.add(DESCRIBES_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    apliesToSchema.add(APLIESTO_DESCRIPTIVEELEMENT, new ConceptSchema("Concept"), ObjectSchema.OPTIONAL);
    apliesToSchema.add(APLIESTO_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);
    ownsSchema.add(OWNS_DESCRIPTIVEELEMENT, new ConceptSchema("Concept"), ObjectSchema.OPTIONAL);
    ownsSchema.add(OWNS_ATTRIBUTE, attributeSchema, ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    rvHeuristicDescriptorSchema.addSuperSchema(quantitativeHeuristicDescriptorSchema);
    svHeuristicDescriptorSchema.addSuperSchema(quantitativeHeuristicDescriptorSchema);
    quantitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    msHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);
    ssHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);
    qualitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    qualitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    characterDescriptorSchema.addSuperSchema(descriptorSchema);
    heuristicDescriptorSchema.addSuperSchema(descriptorSchema);
    rangeValueSchema.addSuperSchema(valueSchema);
    rvCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);
    singleValueSchema.addSuperSchema(valueSchema);
    svCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);
    quantitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    msCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    ssCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    attributeSchema.addSuperSchema(definedTermSchema);
    environmentalCategorySchema.addSuperSchema(definedTermSchema);
    structureSchema.addSuperSchema(definedTermSchema);
    stateSchema.addSuperSchema(definedTermSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
